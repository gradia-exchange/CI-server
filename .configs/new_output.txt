Already up to date.
Collecting stone-grading@ git+https://github.com/gradia-exchange/StoneGrading
  Cloning https://github.com/gradia-exchange/StoneGrading to /private/var/folders/n_/8s22dj292t72dwl6bbn9p3_80000gn/T/pip-install-7pzr4byr/stone-grading_34e10ef476e641018dcec1d912a19f8c
  Resolved https://github.com/gradia-exchange/StoneGrading to commit a75a403b362aca53d40293a0da845ce760a8a41a
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: appdirs==1.4.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 1)) (1.4.4)
Requirement already satisfied: asgiref==3.3.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 2)) (3.3.1)
Requirement already satisfied: attrs==20.3.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 3)) (20.3.0)
Requirement already satisfied: black==20.8b1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 4)) (20.8b1)
Requirement already satisfied: certifi==2020.12.5 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 5)) (2020.12.5)
Requirement already satisfied: chardet==3.0.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 6)) (3.0.4)
Requirement already satisfied: click==7.1.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 7)) (7.1.2)
Requirement already satisfied: colorama==0.4.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 8)) (0.4.4)
Requirement already satisfied: configparser==5.0.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 9)) (5.0.1)
Requirement already satisfied: coreapi==2.3.3 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 10)) (2.3.3)
Requirement already satisfied: coreschema==0.0.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 11)) (0.0.4)
Requirement already satisfied: crayons==0.4.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 12)) (0.4.0)
Requirement already satisfied: Django==3.1.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 13)) (3.1.4)
Requirement already satisfied: django-cors-headers==3.5.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 14)) (3.5.0)
Requirement already satisfied: django-rq==2.4.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 15)) (2.4.1)
Requirement already satisfied: djangorestframework==3.12.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 16)) (3.12.2)
Requirement already satisfied: drf-yasg2==1.19.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 17)) (1.19.4)
Requirement already satisfied: ecdsa==0.14.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 18)) (0.14.1)
Requirement already satisfied: flake8==3.8.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 19)) (3.8.4)
Requirement already satisfied: idna==2.10 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 20)) (2.10)
Requirement already satisfied: inflection==0.5.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 21)) (0.5.1)
Requirement already satisfied: iniconfig==1.1.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 22)) (1.1.1)
Requirement already satisfied: itypes==1.2.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 23)) (1.2.0)
Requirement already satisfied: Jinja2==2.11.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 24)) (2.11.2)
Requirement already satisfied: MarkupSafe==1.1.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 25)) (1.1.1)
Requirement already satisfied: mccabe==0.6.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 26)) (0.6.1)
Requirement already satisfied: mypy-extensions==0.4.3 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 27)) (0.4.3)
Requirement already satisfied: numpy==1.20.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 28)) (1.20.2)
Requirement already satisfied: opencv-python==4.5.1.48 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 29)) (4.5.1.48)
Requirement already satisfied: ordered-set==4.0.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 30)) (4.0.2)
Requirement already satisfied: packaging==20.7 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 31)) (20.7)
Requirement already satisfied: pandas==1.2.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 32)) (1.2.4)
Requirement already satisfied: pathspec==0.8.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 33)) (0.8.1)
Requirement already satisfied: Pillow==8.0.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 34)) (8.0.1)
Requirement already satisfied: pluggy==0.13.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 35)) (0.13.1)
Requirement already satisfied: py==1.9.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 36)) (1.9.0)
Requirement already satisfied: pyasn1==0.4.8 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 37)) (0.4.8)
Requirement already satisfied: pycodestyle==2.6.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 38)) (2.6.0)
Requirement already satisfied: pyflakes==2.2.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 39)) (2.2.0)
Requirement already satisfied: PyJWT==1.7.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 40)) (1.7.1)
Requirement already satisfied: PyLaTeX==1.4.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 41)) (1.4.1)
Requirement already satisfied: pyparsing==2.4.7 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 42)) (2.4.7)
Requirement already satisfied: pytest==6.1.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 43)) (6.1.2)
Requirement already satisfied: pytest-django==4.1.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 44)) (4.1.0)
Requirement already satisfied: pytest-pythonpath==0.7.3 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 45)) (0.7.3)
Requirement already satisfied: python-dateutil==2.8.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 46)) (2.8.1)
Requirement already satisfied: python-dotenv==0.15.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 47)) (0.15.0)
Requirement already satisfied: python-jose==3.2.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 48)) (3.2.0)
Requirement already satisfied: pytz==2020.4 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 49)) (2020.4)
Requirement already satisfied: pyzbar==0.1.8 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 50)) (0.1.8)
Requirement already satisfied: qrcode==6.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 51)) (6.1)
Requirement already satisfied: redis==3.5.3 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 52)) (3.5.3)
Requirement already satisfied: regex==2020.11.13 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 53)) (2020.11.13)
Requirement already satisfied: requests==2.25.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 54)) (2.25.0)
Requirement already satisfied: rq==1.9.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 55)) (1.9.0)
Requirement already satisfied: rsa==4.6 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 56)) (4.6)
Requirement already satisfied: ruamel.yaml==0.16.12 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 57)) (0.16.12)
Requirement already satisfied: ruamel.yaml.clib==0.2.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 58)) (0.2.2)
Requirement already satisfied: selenium==3.141.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 59)) (3.141.0)
Requirement already satisfied: six==1.15.0 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 60)) (1.15.0)
Requirement already satisfied: sqlparse==0.4.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 61)) (0.4.1)
Requirement already satisfied: toml==0.10.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 63)) (0.10.2)
Requirement already satisfied: typed-ast==1.5.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 64)) (1.5.1)
Requirement already satisfied: typing-extensions==3.7.4.3 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 65)) (3.7.4.3)
Requirement already satisfied: uritemplate==3.0.1 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 66)) (3.0.1)
Requirement already satisfied: urllib3==1.26.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 67)) (1.26.2)
Requirement already satisfied: webdriver-manager==3.2.2 in /Users/drkali/.environments/gradia-lab-sample/lib/python3.9/site-packages (from -r requirements39.txt (line 68)) (3.2.2)

> gradia@0.1.0 build
> react-scripts build

Creating an optimized production build...
Compiled with warnings.

./src/components/FrontEndComps/SecHeader/SecHeader.jsx
Critical dependency: the request of a dependency is an expression

./src/components/AdminComps/AccountSetting/LoginSetting.jsx
  Line 108:17:  The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md  jsx-a11y/anchor-is-valid

./src/components/AdminComps/MyReports/MyReportsMobile.jsx
  Line 142:11:  img elements must have an alt prop, either with meaningful text, or an empty string for decorative images  jsx-a11y/alt-text

./src/components/FrontEndComps/Footer/Footer.jsx
  Line 160:17:  The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md  jsx-a11y/anchor-is-valid

./src/components/AdminComps/AccountSetting/AccountInformation.jsx
  Line 22:6:  React Hook useEffect has missing dependencies: 'local.ADMIN_FEAT_MY_ACC.M10.B1' and 'local.ADMIN_FEAT_MY_ACC.M8.B1'. Either include them or remove the dependency array. If 'setFormToRender' needs the current value of 'local.ADMIN_FEAT_MY_ACC.M10.B1', you can also switch to useReducer instead of useState and read 'local.ADMIN_FEAT_MY_ACC.M10.B1' in the reducer  react-hooks/exhaustive-deps

./src/Screens/AdminScreens/AdminMain/AdminMain.jsx
  Line 25:6:  React Hook useEffect has missing dependencies: 'getAllReport' and 'getAllUserData'. Either include them or remove the dependency array. If 'getAllUserData' changes too often, find the parent component that defines it and wrap that definition in useCallback  react-hooks/exhaustive-deps

./src/components/FrontEndComps/ReportComps/ReportTopRightPanels/BatchNumberComp.jsx
  Line 28:17:  Using target="_blank" without rel="noopener noreferrer" is a security risk: see https://mathiasbynens.github.io/rel-noopener  react/jsx-no-target-blank
  Line 46:19:  Using target="_blank" without rel="noopener noreferrer" is a security risk: see https://mathiasbynens.github.io/rel-noopener  react/jsx-no-target-blank

./src/components/AdminComps/MyReports/MyReportsNew.jsx
  Line 331:17:  img elements must have an alt prop, either with meaningful text, or an empty string for decorative images  jsx-a11y/alt-text
  Line 339:17:  img elements must have an alt prop, either with meaningful text, or an empty string for decorative images  jsx-a11y/alt-text
  Line 347:17:  img elements must have an alt prop, either with meaningful text, or an empty string for decorative images  jsx-a11y/alt-text
  Line 355:17:  img elements must have an alt prop, either with meaningful text, or an empty string for decorative images  jsx-a11y/alt-text

./src/App.js
  Line 33:6:  React Hook useEffect has a missing dependency: 'addToast'. Either include it or remove the dependency array  react-hooks/exhaustive-deps

./src/components/AdminComps/ReportPopUpModal/FilterPopupLayout/FilterPopupLayout.jsx
  Line 42:6:  React Hook useEffect has a missing dependency: 'filter'. Either include it or remove the dependency array. You can also do a functional update 'setFilter(f => ...)' if you only need 'filter' in the 'setFilter' call  react-hooks/exhaustive-deps

./src/Screens/FrontEndScreens/DiamondKnowledge/DiamondKnowledge.jsx
  Line 54:6:  React Hook useEffect has a missing dependency: 'isMobile'. Either include it or remove the dependency array  react-hooks/exhaustive-deps

./src/components/AdminComps/FeatureReport/FeatureReport.jsx
  Line 83:6:  React Hook useEffect has a missing dependency: 'getSingleReport'. Either include it or remove the dependency array. If 'getSingleReport' changes too often, find the parent component that defines it and wrap that definition in useCallback  react-hooks/exhaustive-deps

Search for the keywords to learn more about each warning.
To ignore, add // eslint-disable-next-line to the line before.

File sizes after gzip:

  365.34 KB  build/static/js/2.596884d2.chunk.js
  95.14 KB   build/static/js/main.ee3f7dfe.chunk.js
  37.23 KB   build/static/css/2.b9f6cddd.chunk.css
  32.45 KB   build/static/css/main.9bbb369a.chunk.css
  771 B      build/static/js/runtime-main.590da24f.js

The project was built assuming it is hosted at /.
You can control this with the homepage field in your package.json.

The build folder is ready to be deployed.
You may serve it with a static server:

  yarn global add serve
  serve -s build

Find out more about deployment here:

  bit.ly/CRA-deploy


> gradia@0.1.0 lint
> eslint 'src/**/*.jsx' && prettier --check 'src/**/*.jsx'

Checking formatting...
All matched files use Prettier code style!
============================= test session starts ==============================
platform darwin -- Python 3.9.8, pytest-6.1.2, py-1.9.0, pluggy-0.13.1
django: settings: gradia_lab.settings_dev (from ini)
rootdir: /Users/drkali/development/Gradia Limited/GRADIA_lab/django_backend, configfile: pytest.ini
plugins: pythonpath-0.7.3, django-4.1.0
collected 194 items

accounts/tests/test_account_fixtures.py .                                [  0%]
accounts/tests/test_add_gradia_user_command.py .....                     [  3%]
accounts/tests/test_authentication_works_after_token_expires.py ..       [  4%]
accounts/tests/test_checks_views.py ..                                   [  5%]
accounts/tests/test_models.py ...                                        [  6%]
accounts/tests/test_seek_information_serializer.py ....                  [  8%]
accounts/tests/test_seek_information_view.py .F...                       [ 11%]
accounts/tests/test_serializers.py ......................                [ 22%]
accounts/tests/test_tokens.py ....                                       [ 24%]
accounts/tests/test_user_logout.py ..                                    [ 25%]
accounts/tests/test_views_account_info.py ..F                            [ 27%]
accounts/tests/test_views_change_password.py F......                     [ 30%]
accounts/tests/test_views_reset_password.py .F.F.....F..                 [ 37%]
accounts/tests/test_views_user_login.py ..F..                            [ 39%]
accounts/tests/test_views_user_signup.py .....                           [ 42%]
reports/tests/test_csv_upload_from_gstocker.py ......                    [ 45%]
reports/tests/test_load_fixtures_command.py ..                           [ 46%]
reports/tests/test_models.py .....                                       [ 48%]
reports/tests/test_nft_data_upload.py FFEFEFE                            [ 51%]
reports/tests/test_pdf_reports_generation.py F....                       [ 53%]
reports/tests/test_purge_report_pdfs_command.py F                        [ 54%]
reports/tests/test_report_fixtures.py .                                  [ 54%]
reports/tests/test_serializers.py ...................................... [ 74%]
                                                                         [ 74%]
reports/tests/test_swagger.py .                                          [ 74%]
reports/tests/test_views_report_data.py F.............FF.........F..F.   [ 90%]
reports/tests/tests_views_transfer.py ...............                    [ 97%]
services/email/test.py ....                                              [100%]

==================================== ERRORS ====================================
_ ERROR at teardown of NFTDataUploadManagmentCommandTestCase.test_nft_data_update_failure _

self = <GRADIA_lab.django_backend.reports.tests.test_nft_data_upload.NFTDataUploadManagmentCommandTestCase testMethod=test_nft_data_update_failure>

    def tearDown(self):
>       os.remove(self.valid_csv_file_name)
E       AttributeError: 'NFTDataUploadManagmentCommandTestCase' object has no attribute 'valid_csv_file_name'

reports/tests/test_nft_data_upload.py:47: AttributeError
_ ERROR at teardown of NFTDataUploadManagmentCommandTestCase.test_nft_data_update_success _

self = <GRADIA_lab.django_backend.reports.tests.test_nft_data_upload.NFTDataUploadManagmentCommandTestCase testMethod=test_nft_data_update_success>

    def tearDown(self):
>       os.remove(self.valid_csv_file_name)
E       AttributeError: 'NFTDataUploadManagmentCommandTestCase' object has no attribute 'valid_csv_file_name'

reports/tests/test_nft_data_upload.py:47: AttributeError
___ ERROR at teardown of NFTDataUploadManagmentCommandTestCase.test_nothing ____

self = <GRADIA_lab.django_backend.reports.tests.test_nft_data_upload.NFTDataUploadManagmentCommandTestCase testMethod=test_nothing>
result = <TestCaseFunction test_nothing>, debug = False

    def _setup_and_call(self, result, debug=False):
        """
        Perform the following in order: pre-setup, run test, post-teardown,
        skipping pre/post hooks if test is set to be skipped.
    
        If debug=True, reraise any errors in setup and use super().debug()
        instead of __call__() to run the test.
        """
        testMethod = getattr(self, self._testMethodName)
        skipped = (
            getattr(self.__class__, "__unittest_skip__", False) or
            getattr(testMethod, "__unittest_skip__", False)
        )
    
        # Convert async test methods.
        if asyncio.iscoroutinefunction(testMethod):
            setattr(self, self._testMethodName, async_to_sync(testMethod))
    
        if not skipped:
            try:
                self._pre_setup()
            except Exception:
                if debug:
                    raise
                result.addError(self, sys.exc_info())
                return
        if debug:
            super().debug()
        else:
            super().__call__(result)
        if not skipped:
            try:
>               self._post_teardown()

../../../../.environments/gradia-lab-sample/lib/python3.9/site-packages/django/test/testcases.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.environments/gradia-lab-sample/lib/python3.9/site-packages/django/test/testcases.py:1005: in _post_teardown
    self._fixture_teardown()
../../../../.environments/gradia-lab-sample/lib/python3.9/site-packages/django/test/testcases.py:1163: in _fixture_teardown
    connections[db_name].check_constraints()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x10266ddf0>
table_names = None

    def check_constraints(self, table_names=None):
        """
        Check each table name in `table_names` for rows with invalid foreign
        key references. This method is intended to be used in conjunction with
        `disable_constraint_checking()` and `enable_constraint_checking()`, to
        determine if rows with invalid references were entered while constraint
        checks were off.
        """
        if self.features.supports_pragma_foreign_key_check:
            with self.cursor() as cursor:
                if table_names is None:
                    violations = cursor.execute('PRAGMA foreign_key_check').fetchall()
                else:
                    violations = chain.from_iterable(
                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()
                        for table_name in table_names
                    )
                # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check
                for table_name, rowid, referenced_table_name, foreign_key_index in violations:
                    foreign_key = cursor.execute(
                        'PRAGMA foreign_key_list(%s)' % table_name
                    ).fetchall()[foreign_key_index]
                    column_name, referenced_column_name = foreign_key[3:5]
                    primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)
                    primary_key_value, bad_value = cursor.execute(
                        'SELECT %s, %s FROM %s WHERE rowid = %%s' % (
                            primary_key_column_name, column_name, table_name
                        ),
                        (rowid,),
                    ).fetchone()
>                   raise IntegrityError(
                        "The row in table '%s' with primary key '%s' has an "
                        "invalid foreign key: %s.%s contains a value '%s' that "
                        "does not have a corresponding value in %s.%s." % (
                            table_name, primary_key_value, table_name, column_name,
                            bad_value, referenced_table_name, referenced_column_name
                        )
                    )
E                   django.db.utils.IntegrityError: The row in table 'reports_triplereport_inclusion' with primary key '1' has an invalid foreign key: reports_triplereport_inclusion.inclusion_id contains a value '5' that does not have a corresponding value in stonegrading_inclusion.id.

../../../../.environments/gradia-lab-sample/lib/python3.9/site-packages/django/db/backends/sqlite3/base.py:343: IntegrityError
=================================== FAILURES ===================================
_______ SeekInformationAPIViewTest.test_view_rate_limiting_at_5_per_hour _______

self = <GRADIA_lab.django_backend.accounts.tests.test_seek_information_view.SeekInformationAPIViewTest testMethod=test_view_rate_limiting_at_5_per_hour>
mocked_queuer = <MagicMock name='enqueue' id='4729935136'>
mocked_email_call = <MagicMock name='EmailMultiAlternatives' id='4731289664'>

    @patch("services.email.core.EmailMultiAlternatives")
    @patch("django_rq.enqueue")
    def test_view_rate_limiting_at_5_per_hour(self, mocked_queuer, mocked_email_call):
        """
        Tests that request more info endpoint rate limiting at 5 requests per hour
        Returns:
        """
        for i in range(5):
            response = self.client.post(reverse("request-more-info"), self.info_data)
            self.assertEqual(response.status_code, 201)
    
        response = self.client.post(reverse("request-more-info"), self.info_data)
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 201 != 429

accounts/tests/test_seek_information_view.py:73: AssertionError
______________ AccountInfoTest.test_rate_limiting_at_100_per_hour ______________

self = <GRADIA_lab.django_backend.accounts.tests.test_views_account_info.AccountInfoTest testMethod=test_rate_limiting_at_100_per_hour>

    def test_rate_limiting_at_100_per_hour(self):
        """
        Tests that account info endpoint is rate limiting at 100 requests per hour
        Returns:
        """
        self.client.force_authenticate(self.user)
        for i in range(100):
            response = self.client.get(
                reverse("user_info", kwargs={"pk": self.user.id}),
            )
            self.assertEqual(response.status_code, 200)
    
        response = self.client.get(
            reverse("user_info", kwargs={"pk": self.user.id}),
        )
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 200 != 429

accounts/tests/test_views_account_info.py:124: AssertionError
_____ ChangePasswordTest.test_change_password_rate_limiting_at_5_per_hour ______

self = <GRADIA_lab.django_backend.accounts.tests.test_views_change_password.ChangePasswordTest testMethod=test_change_password_rate_limiting_at_5_per_hour>

    def test_change_password_rate_limiting_at_5_per_hour(self):
        """
        Tests that change password endpoint is rate limiting at 5 requests per hour
        Returns:
        """
        self.client.force_authenticate(self.user)
        old_password = self.password
        for i in range(5):
            new_password = f"new@Passw0rd!.{i}"
            response = self.client.post(
                reverse("change_password"),
                {
                    "old_password": old_password,
                    "password": new_password,
                    "confirmPassword": new_password,
                },
            )
            old_password = new_password
            self.assertEqual(response.status_code, 201)
            self.user.refresh_from_db()
            self.assertTrue(self.user.check_password(new_password))
    
        response = self.client.post(
            reverse("change_password"),
            {
                "old_password": old_password,
                "password": "new_password",
                "confirmPassword": "new_password",
            },
        )
    
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 400 != 429

accounts/tests/test_views_change_password.py:150: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/users/change_password/
_________ GeneratePasswordResetLinkTest.test_rate_limit_at_5_per_hour __________

self = <GRADIA_lab.django_backend.accounts.tests.test_views_reset_password.GeneratePasswordResetLinkTest testMethod=test_rate_limit_at_5_per_hour>
mock_send = <MagicMock name='send' id='4729963952'>

    def test_rate_limit_at_5_per_hour(self, mock_send):
        """
        Tests that generate password reset email endpoint is rate limiting at 5 requests
        per hour
        :param mock_send:
        :return:
        """
        for i in range(5):
            response = self.client.post(reverse("generate_password_reset_email"), {"email": self.user.email})
            self.assertEqual(response.status_code, 200)
    
        response = self.client.post(reverse("generate_password_reset_email"), {"email": self.user.email})
>       self.assertEqual(429, response.status_code)
E       AssertionError: 429 != 200

accounts/tests/test_views_reset_password.py:61: AssertionError
_______ ValidateResetPasswordTokenLinkTest.test_rate_limit_at_5_per_hour _______

self = <GRADIA_lab.django_backend.accounts.tests.test_views_reset_password.ValidateResetPasswordTokenLinkTest testMethod=test_rate_limit_at_5_per_hour>

    def test_rate_limit_at_5_per_hour(self):
        for i in range(5):
            response = self.client.get(reverse("validate_reset_password_link", args=(self.uidb64, "invalidtoken")))
            self.assertNotEqual(response.status_code, 429)
    
        response = self.client.get(reverse("validate_reset_password_link", args=(self.uidb64, "invalidtoken")))
>       self.assertEqual(429, response.status_code)
E       AssertionError: 429 != 302

accounts/tests/test_views_reset_password.py:125: AssertionError
_ ResetPasswordViewTest.test_final_reset_password_rate_limiting_at_5_per_hour __

self = <GRADIA_lab.django_backend.accounts.tests.test_views_reset_password.ResetPasswordViewTest testMethod=test_final_reset_password_rate_limiting_at_5_per_hour>

    def test_final_reset_password_rate_limiting_at_5_per_hour(self):
        """
        Tests that final reset password endpoint is rate limiting at 5 requests per hour
        :param mock_send:
        :returns:
        """
        for i in range(5):
            response = self.client.post(
                reverse("final_reset_password"), {"token": self.token, "password": "new2ndPassw0rd!"}
            )
            self.assertEqual(response.status_code, 201)
            self.user.refresh_from_db()
            self.assertTrue(self.user.check_password("new2ndPassw0rd!"))
    
        response = self.client.post(
            reverse("final_reset_password"), {"token": self.token, "password": "new2ndPassw0rd!"}
        )
>       self.assertLessEqual(extract_int_from_throttle_message(response.json()["detail"]), 3600)
E       KeyError: 'detail'

accounts/tests/test_views_reset_password.py:176: KeyError
____________ UserLoginTest.test_login_rate_limiting_at_20_per_hour _____________

self = <GRADIA_lab.django_backend.accounts.tests.test_views_user_login.UserLoginTest testMethod=test_login_rate_limiting_at_20_per_hour>

    def test_login_rate_limiting_at_20_per_hour(self):
        """
        Tests that user can login 20 times in an hour
        Returns:
        """
        for i in range(20):
            response = self.client.post(
                reverse("login"),
                {"email": self.user.email, "password": self.password},
                format="json",
            )
            self.assertEqual(200, response.status_code)
            self.assertTrue("Authorization", response._headers)
    
        response = self.client.post(
            reverse("login"),
            {"email": self.user.email, "password": self.password},
            format="json",
        )
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 200 != 429

accounts/tests/test_views_user_login.py:84: AssertionError
_____________________________ DummyTest.test_dummy _____________________________

self = <GRADIA_lab.django_backend.reports.tests.test_nft_data_upload.DummyTest testMethod=test_dummy>
result = <TestCaseFunction test_dummy>, debug = False

    def _setup_and_call(self, result, debug=False):
        """
        Perform the following in order: pre-setup, run test, post-teardown,
        skipping pre/post hooks if test is set to be skipped.
    
        If debug=True, reraise any errors in setup and use super().debug()
        instead of __call__() to run the test.
        """
        testMethod = getattr(self, self._testMethodName)
        skipped = (
            getattr(self.__class__, "__unittest_skip__", False) or
            getattr(testMethod, "__unittest_skip__", False)
        )
    
        # Convert async test methods.
        if asyncio.iscoroutinefunction(testMethod):
            setattr(self, self._testMethodName, async_to_sync(testMethod))
    
        if not skipped:
            try:
                self._pre_setup()
            except Exception:
                if debug:
                    raise
                result.addError(self, sys.exc_info())
                return
        if debug:
            super().debug()
        else:
            super().__call__(result)
        if not skipped:
            try:
>               self._post_teardown()

../../../../.environments/gradia-lab-sample/lib/python3.9/site-packages/django/test/testcases.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../../../.environments/gradia-lab-sample/lib/python3.9/site-packages/django/test/testcases.py:1005: in _post_teardown
    self._fixture_teardown()
../../../../.environments/gradia-lab-sample/lib/python3.9/site-packages/django/test/testcases.py:1163: in _fixture_teardown
    connections[db_name].check_constraints()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x10266ddf0>
table_names = None

    def check_constraints(self, table_names=None):
        """
        Check each table name in `table_names` for rows with invalid foreign
        key references. This method is intended to be used in conjunction with
        `disable_constraint_checking()` and `enable_constraint_checking()`, to
        determine if rows with invalid references were entered while constraint
        checks were off.
        """
        if self.features.supports_pragma_foreign_key_check:
            with self.cursor() as cursor:
                if table_names is None:
                    violations = cursor.execute('PRAGMA foreign_key_check').fetchall()
                else:
                    violations = chain.from_iterable(
                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()
                        for table_name in table_names
                    )
                # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check
                for table_name, rowid, referenced_table_name, foreign_key_index in violations:
                    foreign_key = cursor.execute(
                        'PRAGMA foreign_key_list(%s)' % table_name
                    ).fetchall()[foreign_key_index]
                    column_name, referenced_column_name = foreign_key[3:5]
                    primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)
                    primary_key_value, bad_value = cursor.execute(
                        'SELECT %s, %s FROM %s WHERE rowid = %%s' % (
                            primary_key_column_name, column_name, table_name
                        ),
                        (rowid,),
                    ).fetchone()
>                   raise IntegrityError(
                        "The row in table '%s' with primary key '%s' has an "
                        "invalid foreign key: %s.%s contains a value '%s' that "
                        "does not have a corresponding value in %s.%s." % (
                            table_name, primary_key_value, table_name, column_name,
                            bad_value, referenced_table_name, referenced_column_name
                        )
                    )
E                   django.db.utils.IntegrityError: The row in table 'reports_triplereport_inclusion' with primary key '1' has an invalid foreign key: reports_triplereport_inclusion.inclusion_id contains a value '5' that does not have a corresponding value in stonegrading_inclusion.id.

../../../../.environments/gradia-lab-sample/lib/python3.9/site-packages/django/db/backends/sqlite3/base.py:343: IntegrityError
______ NFTDataUploadManagmentCommandTestCase.test_nft_data_update_failure ______

self = <GRADIA_lab.django_backend.reports.tests.test_nft_data_upload.NFTDataUploadManagmentCommandTestCase testMethod=test_nft_data_update_failure>

    def test_nft_data_update_failure(self):
        """
        Tests that nft data upload management command fails to update report if invalid gradia IDS
        :returns:
        """
        out = io.StringIO()
    
        with self.assertRaises(CommandError):
>           call_command("upload-blockchain-data", self.invalid_csv_file_name, stdout=out)
E           AttributeError: 'NFTDataUploadManagmentCommandTestCase' object has no attribute 'invalid_csv_file_name'

reports/tests/test_nft_data_upload.py:82: AttributeError
______ NFTDataUploadManagmentCommandTestCase.test_nft_data_update_success ______

self = <GRADIA_lab.django_backend.reports.tests.test_nft_data_upload.NFTDataUploadManagmentCommandTestCase testMethod=test_nft_data_update_success>

    def test_nft_data_update_success(self):
        """
        Tests that nft data upload management command updates reports successfully if valid gradia IDS
        :returns:
        """
        out = io.StringIO()
>       call_command("upload-blockchain-data", self.valid_csv_file_name, stdout=out)
E       AttributeError: 'NFTDataUploadManagmentCommandTestCase' object has no attribute 'valid_csv_file_name'

reports/tests/test_nft_data_upload.py:60: AttributeError
______________ NFTDataUploadManagmentCommandTestCase.test_nothing ______________

self = <GRADIA_lab.django_backend.reports.tests.test_nft_data_upload.NFTDataUploadManagmentCommandTestCase testMethod=test_nothing>

    def tearDown(self):
>       os.remove(self.valid_csv_file_name)
E       AttributeError: 'NFTDataUploadManagmentCommandTestCase' object has no attribute 'valid_csv_file_name'

reports/tests/test_nft_data_upload.py:47: AttributeError
______________ TestPdfGeneration.test_rate_limiting_at_5_per_hour ______________

self = <GRADIA_lab.django_backend.reports.tests.test_pdf_reports_generation.TestPdfGeneration testMethod=test_rate_limiting_at_5_per_hour>

    @patch("reports.api.views.generate_pdf_report.generate_report_pdf_file", Mock())
    @patch("reports.api.views.generate_pdf_report.FileWrapper", Mock())
    def test_rate_limiting_at_5_per_hour(self):
        """
        Tests pdf generation endpoint is rate limiting at 5 requests per hour
        Returns:
        """
        self.client.force_authenticate(self.user)
    
        for i in range(5):
            with patch("reports.report_pdf_generator.pdf_font_name", "helvet"):
                response = self.client.get(reverse("generate_pdf_report", args=(self.gradia_ID,)))
            self.assertEqual(response.status_code, 200)
    
        with patch("reports.report_pdf_generator.pdf_font_name", "helvet"):
            response = self.client.get(reverse("generate_pdf_report", args=(self.gradia_ID,)))
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 200 != 429

reports/tests/test_pdf_reports_generation.py:91: AssertionError
__ PurgeReportPdfsCommandTest.test_purge_report_command_deletes_report_files ___

self = <GRADIA_lab.django_backend.reports.tests.test_purge_report_pdfs_command.PurgeReportPdfsCommandTest testMethod=test_purge_report_command_deletes_report_files>

    def test_purge_report_command_deletes_report_files(self):
        """
        Tests that purge-report-pdfs command actually deletes files
        Returns:
        """
        pdf_files = glob(f"{settings.MEDIA_ROOT}/pdf_report_*")
>       self.assertEqual(len(pdf_files), 2)
E       AssertionError: 6 != 2

reports/tests/test_purge_report_pdfs_command.py:41: AssertionError
_ TestBasicReportGetSingleItem.test_authenticated_rate_limiting_at_100_per_hour _

self = <GRADIA_lab.django_backend.reports.tests.test_views_report_data.TestBasicReportGetSingleItem testMethod=test_authenticated_rate_limiting_at_100_per_hour>

    def test_authenticated_rate_limiting_at_100_per_hour(self):
        """
        Tests basic report data endpoint is rate limiting at 100 requests per hour
        Returns:
        """
        self.client.force_authenticate(self.basic_report.get_current_owner())
        for i in range(100):
            response = self.client.get(reverse("report-single-data", args=(self.basic_report.gradia_ID,)))
            self.assertEqual(response.status_code, 200)
    
        response = self.client.get(reverse("report-single-data", args=(self.basic_report.gradia_ID,)))
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 200 != 429

reports/tests/test_views_report_data.py:193: AssertionError
_ TestBasicReportGetSingleItem.test_unauthenticated_rate_limiting_at_100_per_hour _

self = <GRADIA_lab.django_backend.reports.tests.test_views_report_data.TestBasicReportGetSingleItem testMethod=test_unauthenticated_rate_limiting_at_100_per_hour>

    def test_unauthenticated_rate_limiting_at_100_per_hour(self):
        """
        Tests basic report data endpoint is rate limiting at 2 requests per hour for
        unauthenticated users
        Returns:
        """
        for i in range(100):
            response = self.client.get(reverse("report-single-data", args=(self.basic_report.gradia_ID,)))
            self.assertEqual(response.status_code, 200)
    
        response = self.client.get(reverse("report-single-data", args=(self.basic_report.gradia_ID,)))
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 200 != 429

reports/tests/test_views_report_data.py:207: AssertionError
_ TestTripleReportGetSingleItem.test_authenticated_rate_limiting_at_100_per_hour _

self = <GRADIA_lab.django_backend.reports.tests.test_views_report_data.TestTripleReportGetSingleItem testMethod=test_authenticated_rate_limiting_at_100_per_hour>

    def test_authenticated_rate_limiting_at_100_per_hour(self):
        """
        Tests triple report data endpoint is rate limiting at 100 requests per hour
        Returns:
        """
        self.client.force_authenticate(self.triple_report.get_current_owner())
        for i in range(100):
            response = self.client.get(reverse("report-single-data", args=(self.triple_report.gradia_ID,)))
            self.assertEqual(response.status_code, 200)
    
        response = self.client.get(reverse("report-single-data", args=(self.triple_report.gradia_ID,)))
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 200 != 429

reports/tests/test_views_report_data.py:344: AssertionError
_ TestTripleReportGetSingleItem.test_unauthenticated_rate_limiting_at_100_per_hour _

self = <GRADIA_lab.django_backend.reports.tests.test_views_report_data.TestTripleReportGetSingleItem testMethod=test_unauthenticated_rate_limiting_at_100_per_hour>

    def test_unauthenticated_rate_limiting_at_100_per_hour(self):
        """
        Tests basic report data endpoint is rate limiting at 2 requests per hour for
        unauthenticated users
        Returns:
        """
        for i in range(100):
            response = self.client.get(reverse("report-single-data", args=(self.triple_report.gradia_ID,)))
            self.assertEqual(response.status_code, 200)
    
        response = self.client.get(reverse("report-single-data", args=(self.triple_report.gradia_ID,)))
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 200 != 429

reports/tests/test_views_report_data.py:358: AssertionError
___ TestReportsGetListItems.test_authenticated_rate_limiting_at_100_per_hour ___

self = <GRADIA_lab.django_backend.reports.tests.test_views_report_data.TestReportsGetListItems testMethod=test_authenticated_rate_limiting_at_100_per_hour>

    def test_authenticated_rate_limiting_at_100_per_hour(self):
        """
        Tests report data (List) endpoint is rate limiting at 100 requests per hour
        Returns:
        """
        self.client.force_authenticate(self.triple_report.get_current_owner())
        for i in range(100):
            response = self.client.get(reverse("report-all-data"))
            self.assertEqual(response.status_code, 200)
    
        response = self.client.get(reverse("report-all-data"))
>       self.assertEqual(response.status_code, 429)
E       AssertionError: 200 != 429

reports/tests/test_views_report_data.py:422: AssertionError
=========================== short test summary info ============================
FAILED accounts/tests/test_seek_information_view.py::SeekInformationAPIViewTest::test_view_rate_limiting_at_5_per_hour
FAILED accounts/tests/test_views_account_info.py::AccountInfoTest::test_rate_limiting_at_100_per_hour
FAILED accounts/tests/test_views_change_password.py::ChangePasswordTest::test_change_password_rate_limiting_at_5_per_hour
FAILED accounts/tests/test_views_reset_password.py::GeneratePasswordResetLinkTest::test_rate_limit_at_5_per_hour
FAILED accounts/tests/test_views_reset_password.py::ValidateResetPasswordTokenLinkTest::test_rate_limit_at_5_per_hour
FAILED accounts/tests/test_views_reset_password.py::ResetPasswordViewTest::test_final_reset_password_rate_limiting_at_5_per_hour
FAILED accounts/tests/test_views_user_login.py::UserLoginTest::test_login_rate_limiting_at_20_per_hour
FAILED reports/tests/test_nft_data_upload.py::DummyTest::test_dummy - django....
FAILED reports/tests/test_nft_data_upload.py::NFTDataUploadManagmentCommandTestCase::test_nft_data_update_failure
FAILED reports/tests/test_nft_data_upload.py::NFTDataUploadManagmentCommandTestCase::test_nft_data_update_success
FAILED reports/tests/test_nft_data_upload.py::NFTDataUploadManagmentCommandTestCase::test_nothing
FAILED reports/tests/test_pdf_reports_generation.py::TestPdfGeneration::test_rate_limiting_at_5_per_hour
FAILED reports/tests/test_purge_report_pdfs_command.py::PurgeReportPdfsCommandTest::test_purge_report_command_deletes_report_files
FAILED reports/tests/test_views_report_data.py::TestBasicReportGetSingleItem::test_authenticated_rate_limiting_at_100_per_hour
FAILED reports/tests/test_views_report_data.py::TestBasicReportGetSingleItem::test_unauthenticated_rate_limiting_at_100_per_hour
FAILED reports/tests/test_views_report_data.py::TestTripleReportGetSingleItem::test_authenticated_rate_limiting_at_100_per_hour
FAILED reports/tests/test_views_report_data.py::TestTripleReportGetSingleItem::test_unauthenticated_rate_limiting_at_100_per_hour
FAILED reports/tests/test_views_report_data.py::TestReportsGetListItems::test_authenticated_rate_limiting_at_100_per_hour
ERROR reports/tests/test_nft_data_upload.py::NFTDataUploadManagmentCommandTestCase::test_nft_data_update_failure
ERROR reports/tests/test_nft_data_upload.py::NFTDataUploadManagmentCommandTestCase::test_nft_data_update_success
ERROR reports/tests/test_nft_data_upload.py::NFTDataUploadManagmentCommandTestCase::test_nothing
============= 18 failed, 176 passed, 3 errors in 144.42s (0:02:24) =============
